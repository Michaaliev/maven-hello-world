name: Java CI with Maven

on:
  push:
    branches: [ "dev" ]

env:
  image: "michaaliev/hello_world"
  version: 1.0.0
  
jobs:
  build:

    runs-on: ubuntu-20.04
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven
    
    - name: clean
      run: mvn -B clean --file my-app/pom.xml
    
    - name: Build with Maven
      run: | 
        cd ./my-app
        sed -n 7p pom.xml >> temp
        sed 's/[^0-9.]//g' temp >> version
        v=`cat version`
        v=`echo "${v%.*}.$((${v##*.}+1))"`
        mvn versions:set -DnewVersion=$v -B package --file pom.xml
        rm temp version
        echo "::set-env name=version::$v"
        echo $version
        
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
          username: ${{ secrets.DOCHUB_USERNAME }}
          password: ${{ secrets.DOCHUB_ACCESS_TOKEN }}

    - name: Build & Tag & Push docker image
      run: |
         cd ./my-app
         sed -n 7p pom.xml >> temp
         sed 's/[^0-9.]//g' temp >> version
         v=`cat version`
         cd ..
         docker image build -t michaaliev/hello_world:$v . 
         docker push michaaliev/hello_world:$v
  
    - name: update version in pom file
      run: |
          cd my-app
          git config --global user.name "Michaaliev"
          git config --global user.email "Michaaliev1663@gmail.com@gmail.com"
          git add pom.xml
          git commit -m "version update"
          git push
  
  
  Deploy:
    needs: build
    runs-on: ubuntu-20.04
    
    steps:
      - uses: actions/checkout@v2 
      - name: Deploy in EC2
        env:
            PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY  }}
            HOSTNAME : ${{ secrets.EC2_HOSTNAME  }}
            USER_NAME : ${{ secrets.EC2_USER_NAME  }}
            IMAGE: $image
            VERSION: $version
            
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 400 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
          docker run --name hello_world -p 80:80 -dit $image:$version sh
          
          '
      
   
